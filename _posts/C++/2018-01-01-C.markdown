---
layout: default
title:  "Chapter 1 C 와는 다른 C++"
date:   2018-01-07 14:00:00
categories: "C++"
---

# C++ 공부하기 (이것이 C++이다)
* 본 자료는 `이것이 C++이다 `  교재를 공부하며 내용을 본인이 이해하기 쉽게 정리한 강의노트입니다 : )

## Chapter 1 C 와는 다른 C++
### 1.1 C와 C++의 차이
* C언어에서 가장 중요한 것은 바로 자료형입니다. `정수형(int)`이나 `문자형(char)` 이냐에 따라 계산되는 값과 표현 방식이 달라지기 때문. 그렇기에 C에서는 구조체를 `typedef`를 이용해서 사용자 정의 자료형을 만들었음.
* 더불어 C언어를 배울 때 누구나 처음 `포인터`를 접할 때  어려움이 있었을 겁니다. 대체로 C에서 이해하기 힘든 개념을 포인터로 꼽곤하지만, 안타깝게 C++에서 역시 포인터는 문젯거리.
* `C++` 은 한마디로 `C의 비효율성을 개선한 언어`라고 생각하면 좋을 것 같음.
* C 와 C++의 가장 큰 차이점은 자료형의 어려운 개념을 쉽게 만드는 것에 있음

### 1.2 Hello World로 본 C++
```c++
#include <iostream>

int main() {
    std::cout << "Hello, World" << std::endl;
    return 0;
}
```
* `std::cout` 에게 `"Hello, World"` 문자열을 전달해주는 것을 알 수 있음.
* 간단히 이해하면 `std::cout`이 알아서 출력을 시켜준다고 간단히 이해하자.
* `#include “stdafx.h”`는 Visual Studio 에서 추가로 사용하는 헤더파일 : stdafx는 standard application frameworks  의 줄임말임, 표준 헤더 파일
* `#include <iostream>` 는 확장명이 없지만 분명한 헤더파일, 그렇다고 확장명이 생략된 것이 아니므로 `iostream.h`와는 다른파일임. 하지만 헤더파일임에도 불구하고 확장자 `.h`가 생략된 이유는 `C++에서는 사용자 정의 헤더가 아닌 표준 헤더파일들은 모두 .h확장명을 생략`
* `iostream`은 `cout, Lendl`같은 객체를 사용하는 데 필요한 헤더 파일임.
* `int _tmain(int argc, _TCHAR* argv[])`란?
```
전 세계의 문자를 하나의 데이터 형식 안에 담는 유니코드를 지원하기 위해 기존의 int main(int argc, char* argv[])를 변경한 것임.
Visual Studio 환경에서 프로그래밍할 때 사용.
```
* `std` 는 네임스페이스라고 하며 개념 상 소속으로 생각하면 됨.
* `::` 는 범위 지정 연산자 혹은 스코프 설정 연산자라고 함.
* `cout`은 콘솔 출력을 담당하는 객체.
* `<<`는 연산자 함수임.

### 1.3 인스턴스와 입출력 흐름
* 객체지향 프로그래밍 환경에서는 모든 것을 다 객체로 표현하고 객체의 형식을 갖는 변수를 `인스턴스`라고 함.
* 예를 들면 `사람 철수, 영희; ` 라는 구문이 있으면 `영희와 철수`는 `사람`이라는 형식에 대한 `인스턴스`라고 할 수 있음.
* `std` 네임스페이스에 속한 `cout` 객체는 `iostream 클래스`의 `인스턴스`
* 여기서 가장 중요한 것은 C처럼 출력해야 하는 결과에 맞춰 자료형을 지정하지 않아도 됨.
```c++
std::cout << 10U << std::endl;
std::cout << 10.5 << std::endl;
std::cout << 3 + 4 << std::endl;
```
```
10
10.5
7
```

* `std::cout << "저는 " << 27 << "살 입니다" << std::endl;` 이런 식으로도 사용가능.
* `std` 네임스페이스에 속한 `cin` 객체는 `cout` 과 정반대의 `입력 방법`을 지원
```c++
#include <iostream>
using namespace std;
int main() {
    int age;
    string name;
    std::cout << "당신의 나이를 입력하시오: " << endl;
    std::cin >> age;
    std::cout << "당신의 이름을 입력하시오: " << endl;
    std::cin >> name;
    std::cout << "[" << name << ", " << age << "]" <<endl;
    return 0;
}
```

### 1.4 자료형
* C에서 자료형과 크게 다르지 않음
* 추가된 자료형
```
longlong : 64비트 정수
char16_t : 16비트 문자
char32_t : 32비트 문자
auto : 컴파일러가 자동으로 형식을 규정하는 자료형 ( ex auto a = 10; // a는 정수형 )
decltype(ex) : ex와 동일한 자료형 ( ex int x = 10; decltype(x) y = 20; )
```

* 변수 선언 및 정의
* C++ 답게 변수를 선언 하는 방법 -> ` int a(10); `
* `auto` : auto 예약어는 지역 변수 선언에 해당하는 기억 분류 지정자입니다. 하지만 사실상 아무도 이 예약어를 사용하지 않음. C++11로 변경되면서 이 auto 예약어 기능이 새롭게 변경됨.
```
핵심 : 초깃값의 형식에 맞춰 선언하는 인스턴스의 형식이 자동으로 결정됨, 나중에 사용하게될 고급 문법들에서 아주 쓰임새 있게 사용함.
```

### 1.5 메모리 동적 할당 ( new 와 delete 연산자 )
* C 나 C++을 사용하는 이유 중 상당 부분은 `포인터`라 해도 과언이 아닌만큼 중요함.
* `포인터`는 강력하지만 조그마한 실수에도 치명적인 오류를 일으킴
* `포인터` 라는 말은 늘 `메모리 관리` 라는 말을 수식어처럼 달고 다님. 이는 무엇보다 할당과 해제라는 관리 문제가 있기 때문.
* C++ 에서는 C이 `malloc()` 혹은 `free()`를 사용하지 않고 대신 `new`와 `delete` 연산자를 사용함.
* 단순히 메모리를 관리하는 이상의 일을 수행하고 문법적으로 연산자이기 때문에 복잡한 함수를 사용한다는 느낌이 줄어들고 편의성이 높아짐 !!
* 사용방법
```
형식 *변수명 = new 형식;
delete 변수명;
```
* 배열의 경우
```
형식 *변수이름 = new 형식[요소개수];
delete[] 변수이름;
```
* `malloc()` 함수와 비교했을 때 가장 도드라진 특징 중 하나는 `메모리의 크기를 정하지 않는다`는 점입니다. 보통 `malloc()`함수는 사용할 때
`sizeof` 연산자를 활용해서 크기를 직접 계산하기도 하는데 `new` 연산자를 활용하면 그럴 필요가 없음.
```c++
int main(){
    int *pData = new int(10);
    int *pData2 = new int;
    *pData2 = 5;
    std::cout << *pData << std::endl;
    std::cout << *pData2 << std::endl;
    std::cout << pData << std::endl;
    delete pData;
    delete pData2;
    std::cout << *pData << std::endl;
    return 0;
}
```
```
결과
10 // pData 포인터가 가리키는 값 ( 초깃값 선언 )
5 // pData2 포인터가 가리키는 값
0x7fe8b2500880 // pData의 메모리 주소
0
```

* 배열 형태의 객체 생성
```c++
int main() {
    int *arr = new int[5];
    for(int i = 0; i<5; i++){
        arr[i] = i;
    }
    for (int i = 0; i<5; i++){
        std::cout << arr[i] << std::endl;
    }
    delete[] arr ;
    return 0;
}
```
```
결과
0
1
2
3
4
```

### 1.6 참조자 형식
* 참조자 ( Reference ) 형식은 C에는 없는 형식으로 포인터와 구조적으로 비슷함. 그러나 겉으로 드러 나는 모습은 전혀 포인터 같지는 않음. 그리고 다음처럼 선언과 동시에 반드시 **초기화**를 해야함.
```
형식 &이름 = 원본;
```

* 상수에는 포인터를 선언할 수 없는 것처럼 참조도 선언할 수 없음.
* 상수에는 참조자를 선언할 수 없음.
```c++
int *pData = &3; // 불가능
int &rData = 3; // 상수에 대한 참조는 불가능
int &rData; // 참조 원본이 없으므로 불가능, 참조 원본이 있어야 함.
```
* 참조형 변수 선언과 정의 ( **겉으로 보기에는 전혀 포인터로 보이지 않음**)
* 예제
```c++
int main() {

    int nData = 10;

    // nData 변수에 대한 참조자 선언
    int &ref = nData;

    // 참조자의 값을 변경하면 원본 값도 변경.
    ref = 20;
    cout << nData << endl;

    return 0;
}
```
* 결과는 20
* 참조는 주소와 같다고 생각하면 좋음.
* C에서 함수를 호출할 때 매개변수로 주소를 전달하는 기법을 `참조에 의한 호출`이라고 배움.
* 함수에서 매개변수가 참조형식인 경우
```c++
#include <iostream>
using namespace std;
void TestFunc(int &rParam){
    //피호출자 함수에서 원본의 값을 변경함
    rParam = 100;
}
int main(){
    int nData = 0;
    // 참조에 의한 인수 전달
    TestFunc(nData);
    cout << nData << endl;
    return 0;
}
```

* 함수의 매개변수가 참조자인 경우 가장 큰 문제는 호출자 코드만 봐서는 함수의 원형을 판단할 수 없다는 것!
* 앞으로 C언어에서 포인터를 사용한 것을 잊고 참조자를 사용하도록 하자!
* 참조자로 구현한 스왑함수
```
void Swap(int &a, int &b){
    int temp;
    temp = a;
    a = b;
    b = temp;
}
```

### 1.6.2 r-value 참조
* 대입 연산자의 두 피연산자 중 오른쪽에 위치한 연산자를 말하는 것으로, 일반적인 변수와 상수 모두 해당될 수 있음.
* `int &&rData = 3;`
* 그렇다면 `int rData = 3;`과 뭐가 다른건가? 결과만 두고 생각하면 둘은 크게 다르지 않음. 하지만 나중에 좀더 다른것을 배우고 쓰이는게 있음.
* 예제
```c++
int TestFunc(int param) {
    int result  = param * 10;
    return result;
}
int main(){
    int input = 0;
    cout << "input number : ";
    cin >> input;
    //산술 연산으로 만들어진 임시 객체에 대한 r-value 참조
    int &&rdata = input + 5;
    cout << rdata << endl;
    int &&result = TestFunc(10);
    // 함수 반환으로 만들어진 임시 객체에 대한 r-value 참조
    result += 10;
    cout << result << endl;
    return 0;
}
```
```
결과
input number : 3
8
110
```
* 이 예제에서 가장 중요한 것은 바로 `임시결과`이다. 임시결과는 이어지는 연선에 활용된 직후 소멸되는 `r-value`이다.
* 즉 `r-value`는 이제 곧 사라질 대상에 대해 참조자를 부여할 수 있는 것.

### 1.7 범위 기반 for 문
* 사용법
```c++
for(auto 요소: 배열이름)
	반복 구문;
```
* 예제
```c++
int main(){
    int arr[5] = {1,2,3,4,5};
    for(auto a : arr){ // 각 요소를 a에 대입해서 출력
        cout << a << ' ';
    }
    cout << endl;
    for(auto &a : arr){ // 각 요소를 참조하여 출력
        cout << a << ' ';
    }
    cout << endl;
    return 0;
}
```

* 위 for 문의 두 결과는 같음
* 전체 배열 요소에 접근 할 때는 위와 같은 `범위 기반의 for문`이 버그도 줄이고 생산성도 향상시킴.
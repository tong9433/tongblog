---
layout: default
title:  "[C++] 1 Bit 개수 세는 알고리즘 완벽정리"
date:   2019-03-09
categories: "Algorithm"
---

## 1 Bit 세기?
* 비트 연산으로 처리할 경우, 데이터 처리에 효율적인 점을 알고 있음.
* 이때 1 Bit의 개수를 빠르게 구할 수 있으면 훌륭한 최적화가 가능함.
* `unsigned long long` 타입의 두 수가 있다고 가정할 때, 각각의 비트는 64비트이다. 이 두 수의 일치하는 비트 수를 판단할 때 `~(a^b)` 후에
1 비트의 개수를 세는 방식으로 가능하다. 일반적으로 하나씩 비트를 셀 경우 64번의 연산이 필요하다. 그러나 이미 존재하는 알고리즘을 이용하면 몇 배 빠른
속도로 일치하는 비트의 개수를 구해낼 수 있다.
* 본 포스트는 unsigned long long 즉 `64bit`의 1의 개수를 세는 것을 기준으로 함수를 구현한다.

### 방법 1 ) 나눗셈, 나머지 연산을 이용한 알고리즘
```c++
int bitCount1(unsigned long long val) {
    int cnt;
    cnt = 0;
    while(val != 0) {
        cnt += val % 2ULL;
        val /= 2;
    }
    return cnt;
}
```
* 가장 쉽게 생각할 수 있는 알고리즘이다. 2로 나눈 나머지 값을 cnt에 더하고, 나누기 2를 반복하면서 값이 0이 될 때 까지 반복해준다.
* 이와 같은 경우 64비트 정수의 경우 64번이 항상 수행됨.

### 방법 2 ) PeterWegner 알고리즘
```c++
int bitCount2(unsigned long long val) {
    int i;
    for(i=0; val!=0; i++) {
        val &= (val - 1ULL);
    }
    return i;
}
```
* 이 알고리즘의 경우 1의 개수 만큼 반복문을 수행한다.
* 즉 1의 개수가 최대일 경우 `방법 1`과 같은 시간이 걸리겠지만, 대게 그런 경우는 없므로 매우 단순하면서 훌륭한 알고리즘.
> 예를 들면 1001000 이라는 비트가 있을 때, -1ULL 을 할 경우 1000111이 된다 이 값과 & 연산을 수행할 경우 최초 발견된 1까지의 비트가 0이되고 하나가 count 되는 것이다.

### 방법 3 ) HammingWeight 알고리즘
```c++
int bitCount3(unsigned long long a)
{
    a = (a & 0x5555555555555555UL) + ((a >> 1) & 0x5555555555555555UL);           // 01010101
    a = (a & 0x3333333333333333UL) + ((a >> 2) & 0x3333333333333333UL);           // 00110011
    a = (a & 0x0F0F0F0F0F0F0F0FUL) + ((a >> 4) & 0x0F0F0F0F0F0F0F0FUL);           // 00001111 = 0x0F
    a = (a & 0x00FF00FF00FF00FFUL) + ((a >> 8) & 0x00FF00FF00FF00FFUL);           // 0x00FF
    a = (a & 0x0000FFFF0000FFFFUL) + ((a >> 16) & 0x0000FFFF0000FFFFUL);          // 0x0000FFFF
    a = (a & 0x00000000FFFFFFFFUL) + ((a >> 32) & 0x00000000FFFFFFFFUL);          // 0x0000FFFF
    return (int)a;
}
```
* 가장 좋다고 판단되는 알고리즘.
* 최악의경우에도 64번의 수행이 아닌 log64 = 6 번의 대입연산으로 카운팅이 가능함.
* 확실하게 이해는 어렵지만, 1인 비트를 한 쪽으로 이동시키면서 전체 비트수를 알아내는 방법을 사용함.
* unsinged int 의 경우 5번의 대입연산만 수행하면 됨.
> a = (a & 0x0000FFFFU) + ((a >> 16 ) & 0x0000FFFFU);

### 방법 4 ) 메모리를 활용한 알고리즘
```c++
int arr[256];
unsigned char temp = 0;
for(int i=0; i<256; i++){
    arr[i] = bitCount(temp);
    temp += 1;
}
int bitCount(unsigned char val) {
    int i;
    for(i=0; val!=0; i++) {
        val &= (val - 1ULL);
    }
    return i;
}
int bitCount4(unsigned long long val)
{
    int cnt = 0;
    while(val!=0) {
        cnt += bitCount(val % 256ULL);
        val /= 256ULL;
    }
    return cnt;
}
```
* 전처리를 통해 8개의 비트까지 모든 개수를 구해 놓은 뒤, 카운팅 하는 방식
* 메모리가 필요하다
* unsigned long long 타입의 경우 8개씩 나누어야 하므로 8번의 반복문이 수행되어 방법 3보다 느리지만, unsinged char의 경우 O(1)만에 수행되므로 가장 빠름.

## 구현
* 각각 수행시간을 비교해 봄.

```c++
#include<iostream>
#include <time.h>

using namespace std;

void printBit(unsigned long long val) {
    bool arr[64];
    for (int i = 0; i < 64; i++) {
        arr[i] = val % 2ULL;
        val /= 2ULL;
    }
    for (int i = 0; i < 64; i++) {
        cout << arr[i];
    }
    cout << endl;
}

int bitCount1(unsigned long long val) {
    int cnt;
    cnt = 0;
    while(val!=0) {
        cnt += val % 2ULL;
        val /= 2;
    }
    return cnt;
}

/* 1의 개수만큼 복잡도가 걸림*/
int bitCount2(unsigned long long val) {
    int i;
    for(i=0; val!=0; i++) {
        val &= (val-1ULL);
    }
    return i;
}

int bitCount3(unsigned long long a)
{
    a = (a & 0x5555555555555555UL) + ((a >> 1) & 0x5555555555555555UL);           // 01010101
    a = (a & 0x3333333333333333UL) + ((a >> 2) & 0x3333333333333333UL);           // 00110011
    a = (a & 0x0F0F0F0F0F0F0F0FUL) + ((a >> 4) & 0x0F0F0F0F0F0F0F0FUL);           // 00001111 = 0x0F
    a = (a & 0x00FF00FF00FF00FFUL) + ((a >> 8) & 0x00FF00FF00FF00FFUL);           // 0x00FF
    a = (a & 0x0000FFFF0000FFFFUL) + ((a >> 16) & 0x0000FFFF0000FFFFUL);          // 0x0000FFFF
    a = (a & 0x00000000FFFFFFFFUL) + ((a >> 32) & 0x00000000FFFFFFFFUL);          // 0x0000FFFF
    return (int)a;
}

int arr[256];

int bitCount(unsigned char val) {
    int i;
    for(i = 0; val != 0; i++) {
        val &= (val-1ULL);
    }
    return i;
}

int bitCount4(unsigned long long val)
{
    int cnt = 0;
    while(val != 0) {
        cnt += bitCount(val % 256ULL);
        val /= 256ULL;
    }
    return cnt;
}

int main() {

    unsigned long long a = 0ULL;
    a |= (1ULL << 3);
    a |= (1ULL << 54);
    a |= (1ULL << 1);
    a |= (1ULL << 2);
    a |= (1ULL << 4);
    a |= (1ULL << 5);
    a |= (1ULL << 6);
    a |= (1ULL << 7);
    a |= (1ULL << 8);


    printBit(a);

    int ans;
    clock_t begin, end;

    begin = clock();
    for(int i=0; i<100000; i++) ans = bitCount1(a);
    end = clock();
    cout<<"bitCount1 수행시간 : "<<((double)(end-begin))/CLOCKS_PER_SEC << " 결과 : " << ans <<endl;

    begin = clock();
    for(int i=0; i<100000; i++) ans = bitCount2(a);
    end = clock();
    cout<<"bitCount2 수행시간 : "<<((double)(end-begin))/CLOCKS_PER_SEC << " 결과 : " << ans <<endl;

    begin = clock();
    for(int i=0; i<100000; i++) ans = bitCount3(a);
    end = clock();
    cout<<"bitCount3 수행시간 : "<<((double)(end-begin))/CLOCKS_PER_SEC << " 결과 : " << ans <<endl;

    unsigned char temp = 0;
    for(int i=0; i<256; i++){
        arr[i] = bitCount(temp);
        temp += 1;
    }

    begin = clock();
    for(int i=0; i<100000; i++) ans = bitCount4(a);
    end = clock();
    cout<<"bitCount4 수행시간 : "<<((double)(end-begin))/CLOCKS_PER_SEC << " 결과 : " << ans <<endl;

    return 0;
}
```

## 출력
```
0111111110000000000000000000000000000000000000000000001000000000
bitCount1 수행시간 : 0.015348 결과 : 9
bitCount2 수행시간 : 0.002001 결과 : 9
bitCount3 수행시간 : 0.000972 결과 : 9
bitCount4 수행시간 : 0.004018 결과 : 9
```
* bitCount3 함수가 가장 빠른 것을 볼 수 있음.
* 일반적인 bitCount1 함수에 비해 15배이상 차이가 나므로 알고리즘 문제풀이 시 매우 효율적인 최적화가 가능함.

---
layout: default
title:  "[JS] 함수형 프로그래밍"
date:   2017-09-08 17:50:00
categories: "Javascript"
---


# JS로 알아보는 함수형 프로그래밍 - 유인동 강사님

## [1강] 함수형 프로그래밍의 정의 순수함수

---

* 자바스크립트로 함수형 프로그래밍을 안내

### 성공적인 프로그래밍
* 모든 프로그래밍 패러다임은 성공적인 프로그래밍을 위해 존재
* 사용성 성능 확장성, 유지보수 대응력이 좋음.

### 함수형 프로그래밍
* 자료처리를 수학적 함수의 계산으로 취급하고 상태와 가변적인 데이터를 배제하는 프로그래밍 기법
* 성공적인 프로그래밍을 위해 부수효과를 미워하고 조합성을 강조하는 프로그래밍 패러다임
* 부수 효과를 미워한다 ? 순수함수를 만든다.
* 조합성을 강조한다 ? 모듈화 수준을 높임.
* 순수함수 -> 오류를 줄이고, 안전성을 높임
* 모듈화 수준이 높다 -> 생산성을 높이고, 유지보수, 대응력, 재사용성 등이 좋음.

### 함수형 프로그래밍과 객체지향 프로그래밍의 비교
* 언어의 관점에서는 일급 객체를 말할 수 있음. 객체지향 언어의 일급 객체는 클래스 이지만 함수형 언어에서는 함수
자체가 일급 객체임.
* 함수형 프로그래밍은 객체지향 프로그래밍의 문제점을 극복하기 위해 등장.
* 객체지향 프로그래밍은 프로램을 상호작용하는 객체들의 집합인 반면에 함수형 프로그래밍은 상태 값을 지니지 않는
함수들의 연속.

### 순수함수
* 순수 함수 예시

```
fucntion add(a, b){
    return a + b;
}

console.log(add(10, 5));

// add 함수는 동일한 인자를 주면 똑같은 결과가 나옴.
// 외부에 영향을 받지 않음.
```
* 순수 함수가 아닌 예시 1

```
var c = 10;
function add2(a, b){
    return a + b + c;
}

console.log(add2(10, 5));
c = 20;
console.log(add2(10, 5));


//c의 값이 달라지면 그 결과가 달라짐
// 이렇게 결과가 달라지는 함수는 순수함수가 아님
```

* 순수 함수가 아닌 예시 2

```
var c = 20;
function add3(a, b){
    c = b;
    return a + b;
}

console.log( add3(10, 10);

// 외부상태에 영향을 줌. 부수효과가 있음
// 결과자체는 항상 동일한 결과를 나타내지만 c의 값을 바꾸므로 순수함수가 아님
```

* 순수 함수가 아닌 예시 3

```
var obj1 = { val:10 };
function add4(obj, b){
    obj.val += b;
}

console.log( obj1.val );
add4(obj1, 20);
console.log( obj1.val );

// obj1의 val 값이 바뀜
// 이런 코딩이 문제인 것이 아니라 이 함수는 순수함수가 아니라는 것
// 함수형 프로그래밍에서는 객체의 원래있던 값은 그대로 두고, 객체를 복사해서 새로운 값을 사용하는 방식으로 프로그래밍을 함.
```

* 외부에 영향을 미치지 않는 순수함수 예시

```
var obj1 = { val: 10 };
// obj1의 값을 참조만 할 뿐 값을 직접 변경하는 경우는 없음.
function add5(obj, b){
    return { val: obj.val + b }
}

//add5 함수를 써도 obj1의 값이 변하지 않음
```

* 결국 순수함수는 외부의 상태를 변화시키지 않고, 인자로 받은 값을 변형시키지 않으면서 값을 다뤄
나가는 프로그래밍 방법임.
* 동일한 값을 받으면 동일한 값을 리턴.
* 굉장히 안전하고 다루기 쉬운 함수.
* 함수형프로그래밍은 순수함수를 통해서 조합성을 강조하는 프로그래밍
* 다양한 로직을 만들고 이점을 발생시킴.





## [2강] 일급함수,add_maker, 함수로 함수 실행하기

---

### 일급함수
* 변수로 함수를 담을 수도 있음

```
var f1 = function(a){ return a*a; };
console.log(f1);

var f2 = add; // 아까 정의한 함수
console.log(f2);
```

* 인자로 함수를 받을 수 있는 함수

```
function f3(func){
    return func();
}

f3(function(){
return 10;
});

```

* add_maker 함수 ( 일급함수 + 클로져 )

```
//return되는 함수는 클로져이기도 함, a라는 변수를 기억하고 있으므로
function add_maker(a){
    return function(b){
        return a + b;
    }
}


//생성된 add10은 순수함수이다.
var add10 = add_maker(10);

console.log(add10(20));
// 결과는 30이 나옴.

```

* 다른예시 - 함수를 인자 받아서 원하는 대로 반환하는 함수, 순수함수를 조합하고 최종적인 결과를 만드는 프로그래밍

```
fucntion f4(f1, f2, f3) {
    return f3(f1() + f2());
}

f4(
function(){return 2;},
function(){return 1;},
function(a){return a*a;}
);

console.log(
f4(
function(){return 2;},
function(){return 1;},
function(a){return a*a;}
);
)

//9를 출력함
```

* 순수함수로 평가시점을 다루게 되면 유리한 점: 비동기가 일어나는 시점이나, 동시성이 필요한 시점에서 일관된 결과를 유지 할 수 있음.


## [3강] 요즘 개발 이야기 함수형 프로그래밍 정의

---

### 요즘 개발이야기
* 재미 / 실시간성이 강조가 되고 있음 : 메신저, 라이브 방송, 실시간 댓글, 협업
* 독창성 / 완성도 : 애니메이션, 무한 스크롤, 핀터레스트
* 동시성 : 비동기 I/O(적은자원으로 동시에 더 많은 연산), CSP, Actor, STM ( soft transtion memory ) ...
* 더 빨라야하는 반응성/ 고가용성 : 고가용성 - 절대 죽지않는 서비스(facebook 같은 것),OTP Suprervisor,Auto Scaling(amazon)- 사용자 급증에 대응
* 대용량 / 정확성 / 병렬성 : 선호도, 점점 정교하고 정확, MapReduce, 클로져 병렬 처리
* 그렇지만 생산성을 타협할 수 없음. 이 모든 것을 효율적으로 하면서 생산성을 높이는 것이 성공적인 프로그래밍
* 복잡도 / MSA /.... : 많아지고 세밀해지는 도구들
* 스멀스멀 다가오는 함수형 프로그래밍
```
1. 좋아지는 하드웨어 성능
2. 좋아지는 컴파일러
3. 함수형 프로그래밍 기술
4. 좋아지는 분산 / 리액티브 환경
5. 동시성 + 병렬성 관련 기술
6. 성공적인 적용 사례와 영향
```

### 함수형 프로그래밍에 대한 정의
> 함수형 프로그래밍은 애플리케이션, 함수의 구성요소 더 나아가서 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선순위에 놓는다.
> 함수형 사고방식은 문제의 해결방법을 동사들로 구성(조합)하는 것
* 마이클 포거스 [클로저 프로그래밍의 즐거움] 에서....
* 객체지향과 형태를 비교 - 무엇을 먼저 디자인 하느냐에 따라 다름 ( 데이터가 먼저냐, 메소드가 먼저냐 )

```
//객체지향
duck.moveLeft();
duck.moveRight();
dog.moveLeft();
dog.moveRight();

//함수형
moveLeft(dog);
moveRight(duck);
moveLeft({ x: 5, y: 2});
moveRight(dog);
```

* 왜 보다는 어떻게 .... 를 생각하자
* 어떻게 전환해 왔는가를 생각해보는 것이 함수형 프로그래밍을 배우는 이유를 잘 알 수 있음.
* 

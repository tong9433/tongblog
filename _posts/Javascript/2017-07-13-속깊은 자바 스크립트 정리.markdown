---
layout: default
title:  "속깊은 자바 스크립트 - 스코프, 클로저"
date:   2017-07-13 17:50:00
categories: "JavaScript"
---

# 속깊은 자바 스크립트 정리
- - - -
1. 스코프
* 자바스크립트에서 스코프 : 자바스크립트에서의 스코프는 일반적인 java, c언어의 블록스코프와는 차이가 있다. 예를 들면 자바스크립트에서 for문 블록 안에서 변수를 선언 할 경우 그 변수를 외부에서 참조가 가능하다. 다른 대부분의 언어는 그렇지 않을 것이다.  그렇기 때문에 아래와 같은 소스에서 alert는 세 가지 div 모두 You clicked div #3 이라고 찍힐 것이다.

```
<div id="div0"> Click me! DIV 0 </div>
<div id="div0"> Click me! DIV 0 </div>
<div id="div0"> Click me! DIV 0 </div>
<script>
	var i, len = 3;
	for (i = 0; i<len; i++){
		document.getElementById("div"+i).addEventListener("click",function(){
		alert("You clicked div #"+i);
});
	}
</script>
```
* 자바스크립트에서의 블록 스코프를 생성하는 구문은 function, with, catch로 나뉜다. 일반적으로 function 키워드나 catach는 자주 사용되지만 with 같은 경우는 개발자 사이에서 사용하지 말아야 할 구문중 하나라고 한다. 앞써 본 소스를 with, function, closer를 활용하여 해결이 가능하다.
* 자바스크립트에서 스코프의 지속성은 자바스크립트 만의 강점중 하나인데 스코프의 지속성이 필요한 이유는 새로운 스코프가 생성되고 스코프 체인을 참조하는 함수를 변수에도 넣을 수 있고, 다른 함수의 인자로 넘겨줄 수 있으며 함수의 반환값으로도 활용 될 수 있다. 또한 함수가 선언된 곳이 아닌 전혀 다른 곳에서 함수가 호출될 수 있어서 해당 함수가 현재 참조하는 스코프를 지속해야 한다.

2. 클로저 
* 클로저는 자바스크립트의 동작을 이해하기 위해 꼭 알아야 할 개념이다. 특정 함수가 참조하는 변수들이 선언된 렉시컬 스코프는 계속 유지되는데, 그 함수와 스코프를 묶어서 클로저라고 한다.

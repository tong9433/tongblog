---
layout: default
title:  "[Vue.js] Vue.js 에 대하여 🆕"
date:   2017-11-04 12:50:00
categories: "Framework"
---

## Vue.js 인터넷 강의
* 본 강의 노트는 인프런 [Vue.js 프론트 개발 강좌](https://www.inflearn.com/course/vue-pwa-vue-js-%EA%B8%B0%EB%B3%B8/)를 기반으로 쓴 강의노트입니다.

##  Vue 강의 개요
* PWA(Progressive Web Apps) 기반 SPA를 제작하기 위해 프론트 엔드 라이브러리 Vue.js 소개
* 진입장벽이나 러닝커브가 낮음.
* Vue 로 화면을 구성하기 위한 기본적인 개념을 학습 -> 샘플 코드 실습
* Vue 의 주요 구성요소를 학습 및 실습
* 구성요소 -> `컴포넌트, 라우터, 리소스, 템플릿`

## 개발환경 구성
* Atom - 무료 오픈소스, 깃헙에서 만든 text editor
* 웹스톰을 이용하여 수강할 예정.
* Node.js 설치
* 구글 크롬 브라우저 설치 - 개발자도구, Vue.js devtools 플러그인 사용

## Vue 는 무엇인가?
* MVVM 패턴에 ViewModel 레이어에 해당하는 View를 기반으로 한 라이브러리?
![사진]({{ tong9433.gitub.io }}/image/vue1.png)

```
View 는 화면을 의미 -> DOM
DOM Listeners가 View의 변화를 감지해서 리엑티브하게 반응
```

* Data Binding 과 화면 단위를 컴포넌트형태로 제공함.
* Angular 에서 지원하는 2 way Data binding 을 동일하게 제공 -> 뒤쪽 데이터 모델과 앞쪽에 표현하는 뷰의 데이터 단위가 동일함.
* Angular의 장점을 이용함.
* Component 간 통신의 기본 골격이 React의 1 way Data Flow 와 유사함.
* Virtual DOM을 이용한 렌더링 방식이 React와 거의 유사
* 다른 프론트엔드 프레임워크에 비교했을 때 훨씬 가볍고 빠름.
* 뷰는 적용하는데 있어서 러닝커브가 낮고 쉽게 접근 가능함.
* 프론트 엔드 프레임워크 비교 사이트 -> https://vuejs.org/v2/guide/comparison.html

## Vue 시작하기 ( 실습 )
* `Hello Vue.js` 메시지 출력해보기

```

<html>
<head>
    <title>Vue Sample</title>
</head>
<body>
<div id="app">
    {{ message }}
</div>
<script src="https://unpkg.com/vue@2.4.4/dist/vue.js"></script>
<script>
    new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue.js!'
        }
    })
</script>
</body>
</html>
```

* MVVM 패턴이란?

```
View <--> View Model <--> Model
백엔드 로직과 클라이언트 마크업과 데이터 표현단을 분리하기 위한 구조, 전통적인 MVC 패턴의 방식에서 기인된 패턴, 간단하게 생각해서 화면 앞단의 화면 동작 관련 로직과 뒷단의 DB데이터 처리 및 서버 로직을 분리하고 뒷단에서 넘어온 데이터를 모델에 담아 뷰로 넘겨주는 중간 지점이라고 생각하면 됨.
```

## 인스턴스 소개
### Vue Instance
* Vue.js 를 이용하여 UI 화면을 개발하기 위해서는 아래 절차를 따름

```javascript
var vm = new Vue({
//내용
})
```

* Vue 라이브러리 로딩 후 접근 가능한 Vue 라는 기존 객체에, 화면에서 사용할 옵션  ( 데이터, 속성, 메서드) 등을 포함하여 화면의 단위를 생성함
* 뷰로 화면을 구성함에 있어서 가장 중요한 요소.

### Vue Instance 생성자
* Vue 생성자로 인스턴스를 만드는 방법 -> `var vm = new Vue({})`

```javascript
var vm = new Vue){
	template :...,
	el:..., // element의 약자고, el에 지정한 특정 태그로 부터 DOM element를 가져옴
	method:{
	...
	},
	created:{
	...
	}
})
```

* 각 options으로 미리 정의한 vue 객체를 확장하여 재사용이 가능. 하지만 아래방법 보다는 template에서 custom element로 작성하는 것이 더 좋음

```javascript
var MyComponent = Vue.extend({

})
var myComponentInstance = new MyComponent()
```

* `.vue` 형식으로 파일을 구조화 하여 프로젝트를 구성하는 방식으로 진행할 것. -> 공식적인 권장사항, 강사님 경험

### Vue Life Cycle 소개
* Vue 객체가 생성될 때 아래의 초기화 작업을 수행함.

```
1. 데이터 관찰 -> View 단에서 데이터가 변화했을 때 감지 하도록
2. 템플릿 컴파일 -> Vue가 가지고 있는 데이터들을 HTML에 넘겨줘서 뷰에 내용을 반영하겠금 변경
3. DOM에 객체 연결
4. DOM UPDATE
-> Vue.js의 특성들, 옵션들을 가지고 있는 객체를 DOM에 연결해서, DOM이 변경되거나 삭제될 때, 화면을 재 갱신할도록 해줌.
```

* `created` 인스턴트가 생성되었을때 실행하는 함수
* `mounted, updated, destroyed`와 같은 옵션을 추가 할 수 있음.

![사진]({{ tong9433.gitub.io }}/image/vue2.png)

* Vue Instance 라이프 사이클

### 라이프싸이클 훅 커스텀 로직 실습

```javascript
<script>
    new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue.js!'
        },
        beforeCreate: function() {
            console.log("beforeCreate");
        },
        created: function() {
            console.log("created");
        },
        mounted: function() {
            console.log("mounted");
            setTimeout(function(){
                this.message="변해라";
            }.bind(this),2000);
        },
        updated: function() {
            console.log("updated");
        }
    })
</script>
```

* 2초 후에 변하는 method 가 발생하고 그때 updated 함수가 실행되는 것을 알 수 있음.

---
layout: default
title:  "[Vue.js] Axios, Templates, Data Binding, 싱글파일 컴포넌트 체계 "
date:   2017-11-05 16:50:00
categories: "Framework"
---


## Vue.js 인터넷 강의
* 본 강의 노트는 인프런 [Vue.js 프론트 개발 강좌](https://www.inflearn.com/course/vue-pwa-vue-js-%EA%B8%B0%EB%B3%B8/)를 기반으로 쓴 강의노트입니다.


## Axios 소개
* Vue에서 HTTP 통신을 위해 제공하는 플러그인
* `Axios 에이시오스`
* promise 기반의 브라우저와 Node를 위한 HTTP client
* 뷰 리소스를 설치를 하고 `this.$http.get(url).then(successCallback, failCallback);`

## Vue Templates
* Vue 로 그리는 화면의 요소들, 함수, 데이터 속성을 모두 Templates 안에 포함한다.

```
1. Vue는 Dom의 요소와 Vue 인스턴스를 매핑할 수 있는 HTML Template를 사용
2. Vue는 Template으로 렌더링 할 때 Virtual DOM을 사용하여 ( React 의 특징 )
 돔 조작을 최소화하고 렌더링을 꼭 다시 해야만 하는 요소를 계산하여 성능 부하를 최소화
3. 원하면 render function을 직접 구현하여 사용가능
```

* 페이지를 다시 그릴때 성능 부하를 느낌  => 그러므로 돔조작을 최소화 해야함.
* 돔조작 관련 성능 테스트를 리액트와 비교 결과 뷰가 훨씬 빠름.
* `Attributes` : `HTML Attributes`를 Vue 의 변수와 연결할 때는 `v-bind`를 이용, Vue 에서 지원하는 스페셜 Attribute, `v-`면 다 Vue에서 지원하는 Attribute라고 생각하면 됨.
* `v-vind`는 코드상에서만 존재하고 실제 뿌려지면 달라짐.

```
<div v-bind:id="dynamicId"></div>
```

* JS Expressions:`/\{\{/ /\}\}/`안에 다음과 같이 `javascript 표현식`도 가능함.

```
<div> /\{\{/ number + 1 /\}\}/ </div>
<div> /\{\{/ message.split('').reveser().join('') /\}\}/ </div>
->허용은 하지만 지향하지는 않음
<div>  /\{\{/ if (ok) { return message }  /\}\}/</div>
-> vue에서는 허용 하지 않음
```

* Directives : `v-` 접두사를 붙인 `attributes` 로 , javascript 표현식으로 값을 나타내는게 일반적임.
`:`를 붙여 인자를 받아 취급할 수 있음.

```
<p v-if="seen"> Now you see me</p> // 참일때만 수행 되는 것
<a v-bind:href="url"></a> // url값이 뷰의 인스턴스에 선언 되어있으면 받아서 href만 url 값과 매핑
<a v-on:click="doSomething"> // 이벤트를 핸들링
```

* Filters : 화면에 표시되는 텍스트의 형식을 편하게 바꿀 수 있도록 고안된 기능이며, `|`을 이용하여 여러 개의 필터를 적용할 수 있음.

```
// message에 표시될 문자에 capitalize 필터의 함수를 적용함, 예를들면 비밀번호 체크
 /\{\{/ message | capitalize  /\}\}/
```

```javascript
new Vue({
	filters: {
  	capitalize: function(value){
			//... 내부 로직
  }
})
```


## Vue 데이터 바인딩
### Data Binding : DOM 기반 HTML Template에 Vue 데이터를 바인딩 하는 방법은 아래와 같이 크게 3가지임

```
1. interpolation (값 대입)
2. Binding Expression ( 값 연결 )
3. Directives (디렉티브 사용)
```

### Interpolation - 값 대입
* Vue의 가장 기본적인 데이터 바인딩 체계 Mustache `/\{\{/ /\}\}/` 를 따른다.

```
<span>Message: /\{\{/msg/\}\}/</span>
<span>This will never change: /\{\{/ * msg /\}\}/ </span> // 처음 로딩할때만 적용되고 리액티비티 시스템을 적용하지 않으므로 msg값이 변화해도 바뀌지 않음
<div id = "item-/\{\{/ id /\}\}/"
```

### Binding Expressions - 값 연결
*  `/\{\{/ /\}\}/`를 이용한 데이터 바인딩을 할 때 자바스크립트 표현식을 사용할 수 있다.

```
<div> /\{\{/ number + 1 /\}\}/ </div>
```
* Vue 에 내장된 Filter 를 `/\{\{/ /\}\}/` 안에 사용할 수 있음, 여러개의 필터 체인 가능

```
/\{\{/ message | filter /\}\}/
/\{\{/ message | filter | filter2 /\}\}/
```

### Directives
* Vue 에서 제공하는 특벼란 Attributes 이며 `v-`의 접두사를 갖는다.
* 자바스크립트 표현식, filter에 모두 적용됨

```
<p v-if="login"> Hello </p>
<a v-on:click="doSomething">
```


### Class Binding
* 클래스에 있는 값을 자바스크립트로 전달하기 힘들었음
* ` class = “/\{\{/ className /\}\}/" ` ,` v-bind:class` 와 같은 두가지 방법을 통해서 가능
* 첫번째 방법은 코드 일관성을 위해 더이상 바인딩을 허용 안함.
* 가급적이면 두 방법중 한가지만 사용하여 일관되게 사용하는 것이 좋음.

```
<div class = "static" v-bind:class="{ 'class-a': isA, 'class-b': isB }"></div>
<script>
	data:{
		isA: true,
		isB: false
	}
</script>
```

* 아래와 같이 Array 문도 사용 가능, 두가지를 추가가능

```
<div v-bind:class="[classA, classB]"></div>
<script>
	data:{
		classA: 'class-a',
		classB: 'class-b'
	}
</script>
```
* vuejs.org 사이트를 활용하면서 개발을 하는 것이 좋음.

### template 실습
* 바인딩 연습하기

```html
<!DOCTYPE html>
<html xmlns:v-on="http://www.w3.org/1999/xhtml" xmlns:v-bind="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue Templates Sample</title>
</head>
<body>
<div id="app">
    <header>
        <!-- #1 -->
        <h3>/\{\{/ name /\}\}/</h3>

    </header>
    <section>
        <!-- #2 -->
        <p v-bind:id="uid">pp</p>

        <!-- #3 -->
        <button v-on:click="clickEvent">alert</button>
        <!-- <button @click="clickBtn">alert</button> -->

        <!-- #4 -->
        <ul v-if="flag">
            <li>1</li>
            <li>2</li>
            <li>3</li>
        </ul>
    </section>
</div>
<script src="./src/vue.js"></script>
<script src="./src/index.js"></script>
</body>
</html>
```

```javascript
var app = new Vue({
    el: '#app',
    data: {
        message : 'Hello Vue.js',
        // 할일 #1
        // 새로운 데이터 속성을 1개 추가하고, data bindings 를 이용하여 화면에 표시해보세요.
        name :'tongil Song',
        uid: '20',
        // 할일 #2
        // uid 를 변경하고 해당 uid 의 변경 여부를 크롬 개발자 도구의 "화면 요소 검사" 기능으로 p 태그의 id 값을 확인해보세요.

        flag: false
        // 할일 #4
        // 위 flag 값을 false 로 변경하였을 때 화면에 어떤 영향을 주는지 확인해보세요.
    },
    methods: {
        // ES6
        clickBtn() {
            console.log("hi");
        },
        // ES5
        // clickBtn: function() {
        //   console.log("hi");
        // }

        // 할일 #3
        // eventMethod 를 하나 추가하고 template 에서 해당 이벤트를 실행할 수 있는 button 을 하나 추가하세요.
        clickEvent(){
            console.log("hello, tongil");
        }
    }
});
```


## Vue 싱글파일 컴포넌트 체계
* 앱의 복잡도가 증가할 때, `.vue` 라는 파일 단위 안에 html, js, css 를 관리할 수 있는 방법
* 복잡도가 커짐에 따라 야기될 수 있는 문제들

```
1. 모든 컴포넌트에 고유의 이름을 붙여야 함.
2. js파일에서 template안의 html 문법을 넣어야 하므로 오타가 나면 알아차리기 힘듬
3. js 파일상에서 css 스타일링 작업이 거의 불가능
4. ES5를 이용해서 계속 앱을 작성할 경우 Babel 빌드가 지원되지 않음.
```

* `.vue` 파일을 브라우저가 렌더할 수 있는 파일들로 변환하려면 weppack 의 `vue-loader` 을 이용해야함.

```
<template>
//...
</template>

<script>
//...
</script>

<style>
//...
</style>
```

* 위와 같이 template 과 js, css가 한파일로 묶임.
---
layout: default
title:  "NPM설치, 모듈설치, 모듈사용법"
date:   2017-09-23 17:50:00
categories: "Node.js / Express"
---

본 포스트는 [생활코딩 강의](https://www.inflearn.com/course/nodejs-강좌-생활코딩) 강의노트입니다


<br>
## 모듈 (NPM설치, 모듈설치, 모듈사용법)
* Node.js 에서 기본적인 웹서버를 만들어 놓음.
* Node.js 에서 만들어 놓은 기본적인 모듈을 쓰는 방법을 배우기
* `const http = require('http');`의 의미 : node.js에서 제공하는 http라는 모듈을 이용한다는 의미. http라는 변수에 http라는 모듈을 담은 것.


<br>
## 간단한 모듈 예제 (os 모듈)

```javascript
const os = require('os');

console.log(os.platform());
```

```
결과)
darwin (mac)
win32 (window에선)
```

<br>
## NPM
* Node Package Manger 의 약자
* Node 계의 앱스토어
* 필요한 모듈을 설치할 수 있는 플랫폼
* 설치, 삭제, 업그레이드, 의존성관리 역할을 수행
* Node가 굉장히 빠른 속도로 성장하는 과정에서 Node.js를 만들어진 수많은 개발도구를 사용하기 위해서는 NPM을 이용해야 함.
* [공식사이트](http://www.npmjs.com)


<br>
## NPM을 이용한 독립적인 앱 설치
* uglify-js 사용해보기

```
npm install uglify-js -g (global)
독립적인 소프트웨어로 사용한다는 뜻
npm install uglify-js
현재 npm을 설치하는 프로젝트 안에서 부품으로 사용
```

* 우리가 사용한 소스코드를 일부러 알아보기 힘들게 만드는 것.

```javascript
function hello(name){
    console.log(name+'is my name')
}

hello("tongil ");
```

* `uglifyjs uglify_ex.js`를 이용해서 바꾸기

```javascript
function hello(name){console.log(name+"is my name")}hello("tongil ");
```

* 위와 같이 가독성이 힘든 코드로 바뀜
* 필수적인 코드를 제외한 공백을 싹 제거
* `uglifyjs uglify_ex.js -m`을 해주면 지역변수와 같이 이름을 바꿔도 상관 없는 변수들을 한글자 알파벳으로 바꿔버림
* `uglifyjs uglify_ex.js -o uglify_ex.min.js -m` :uglify_ex.min.js 파일을 생성하여 변환시킨 것을 저장.


<br>
## NPM을 이용하여 모듈 설치
* 다른 사람이 만든 모듈을 자신의 프로젝트의 부품으로 사용.
* underscore.js를 사용해보자.

1. `npm init`  을 통해 npm 프로젝트 설정을 함.
2.
```
package name: (server_side_js)
version: (1.0.0)
description: Server side javascript tutorials
entry point: (hello.js)
test command: <tdd 사용시>
git repository: <github 주소>
keywords:
author:
license: (ISC)
```

3. `package.json`에 nam 프로젝트와 관련된 내용이 저장됨
4. `npm install underscore` 명령을 실행

* `npm install underscore --save`: 어떠한 모듈을 프로젝트에 포함 시킬 경우에는 —save를 써야할 것. save가 있을경우 depndencies에 포함됨 ( 근데 나는 안써도 포함됨, save를 쓸경우에는 package-lock.json 파일이 생김..)


<br>
## underscore.js 모듈 사용하기
* underscroe는 `_`라는 변수명으로 객체를 가져오는 관습이 있음.
* 모듈 사용해보기

```javascript
var _= require('underscore');
var arr = [3, 6, 9, 1, 12];

_.first(arr);

console.log(arr[0]);
console.log(_.first(arr));// arr의 첫번째 원소를 반환

console.log(arr[arr.length-1]);
console.log(_.last(arr));// arr의 마지막 원소를 반환
```

* 결과

```
3
3
12
12
```

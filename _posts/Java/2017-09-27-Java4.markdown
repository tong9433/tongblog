---
layout: default
title:  "Java Collections Framework"
date:   2017-09-27 14:00:00
categories: "Java"
---



# Java Collections Framework
* List, Set, Map, Tree, Stack 자료구조들이 있음
* 각각의 쓰임새(순서유지, 중복허용, 탐색, 장단점) 에따라 어느 자료구조를 써야 할지
잘 판단하는 것이 관건

<br>
## equals() 와 hashCode()
* equals() : 메모리상의 위치가 다르지만 그 안의 값이 같음을 비교
* hashCode : 해싱 알고리즘에 의해 각각의 객체가 생성될 때 hash value를 만들어 내는 메소드

<br>
## List
* 순서가 있고, 중복이 허용됨 ( 배열과 차이 )
* 원하는 데이터가 뒤쪽에 위치할 경우 탐색하는데 시간이 오래걸림.
* `equals()`를 이용한 데이터 검색을 할 수 있음.
* `List` 인터페이스를 상속받아 구현된 `ArrayList`와 `LinkedList`가 있음

* `ArrayList`
1. ArrayList는 내부적으로 데이터를 배열에서 관리하며 데이터의 추가,삭제를 위해 임시배열을
생성해 데이터를 복사함.
2. 대량의 자료를 추가/삭제하는 경우에 그만큼 데이터 복사가 많이 일어나 성능이 떨어짐.
3. 각 데이터는 인덱스를 가지고 있으므로 데이터 검색에 유리
4. 예시
```java
List<String> list = new ArrayList<String>();
list.add("apple");
list.add("pear");
list.add("tomato");
list.add("melon");
System.out.println(list.indexOf("pear"));
list.remove("pear");
System.out.println(list.indexOf("tomato"));
```
결과
```
1
1
```

* `LinkedList`
1. LinkedList는 데이터를 저장하는 각노드가 이전 노드와 다음노드만 알고있음.
2. 데이터 추가 삭제시 유리하다.
3. 데이터 검색시 불리.
4. 예시
```java
List<String> list = new LinkedList<String>();
list.add("apple");
list.add("pear");
list.add("tomato");
list.add("melon");
System.out.println(list.indexOf("pear"));
list.remove("pear");
System.out.println(list.indexOf("tomato"));
```
결과
```
1
1
```


<br>
## Set
* 순서가 없고, 중복을 허용하지 않는 자료구조
* 속도가 빠르다.
* 단순 집합의 개념으로 정렬하기 위해서는 별도의 처리가 필요.
* `Set` 인터페이스를 상속받아 구현된 `HashSet`와 `TreeSet`이 있음
* 예시
```java
Set<String> set = new HashSet<String>();
set.add("pineapple");
set.add("apple");
set.add("pineapple");
set.add("melon");
set.add("tomato");
set.remove("apple");
System.out.println(set.size());
String[] arr = set.toArray(new String[set.size()]);
for(String s:arr) {
    System.out.println(s);
}
```
결과
```
3
pineapple
tomato
melon
```


<br>
## Map
* 앞에 있는게 `Key`
* `Key(키)`와 `Value(값)`으로 나누어 데이터를 관리
* 순서는 없고, 키의 중복이 없음
* 빠른속도가 장점이지만 key 검색 속도가 속도를 좌우함.
* `Map` 인터페이스를 상속받아 구현된 `HashMap`과 `TreeMap`으로 구분됨.
* 예시
```java
Map<String,Integer> map = new HashMap<String, Integer>();
map.put("tomato",3000);
map.put("melon",20000);
map.put("apple",1500);
System.out.println(map.entrySet());
System.out.println(map.get("tomato"));
System.out.println(map.containsKey("melon"));
```
결과
```
[apple=1500, tomato=3000, melon=20000]
3000
true
```

<br>
## Stack
* 점점 원소가 쌓이는 구조
* 가장 최근에 삽입된 원소가 가장 먼저 나옴
* 자주 사용되는 메소드
1. `push()` : 원소를 삽입
2. `pop()` : 가장 최근 삽입된 원소를 제거하고, 해당 원소를 출력
3. `peek()` : 가장 최근 삽입된 원소를 출력
* 예시
```java
Stack<String> stack = new Stack<>();
stack.push("melon");
stack.push("apple");
stack.push("pineapple");
System.out.println(stack.size());
System.out.println(stack.pop());
System.out.println(stack.size());
System.out.println(stack.peek());
System.out.println(stack.size());
```
결과
```
3
pineapple
2
apple
2
```

<br>
## Tree
* 각 원소들의 균형된 분포가 관건
* 노드가 잘 퍼질 수록 빠르므로 대용량에 적합.
* 예시
```java
TreeSet<String> tree = new TreeSet<String>();
tree.add("a");
tree.add("b");
tree.add("c");
tree.add("d");
System.out.println(tree);
```
결과
```
[a, b, c, d]
```

<br>
## Iterator
* 모든 자료구조 클래스들이 구현하는 인터페이스.
* 어떤 자료구조 클래스에 관계없이 자료를 조회하고 싶을 때 사용.
* 메소드
1. `hasNext()` : 다음 원소가 있으면 `true`를 반환함.
2. `next()` : 다음 데이터를 반환함.
3. `remove()` : 데이터를 삭제함.
* 예시
```java
Stack<String> stack = new Stack<>();
stack.push("melon");
stack.push("apple");
stack.push("pineapple");
Iterator<String> it = stack.iterator();
while(it.hasNext()){
    System.out.println(it.next());
}
```
결과
```
melon
apple
pineapple
```
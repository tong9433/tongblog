---
layout: default
title:  "[C++] 정말 유용한 비트마스크!"
date:   2019-02-18
categories: "DataStructure"
---

# 8비트 flag 연산할 땐 비트마스크!!
<br>
## 비트마스크란
> 정수를 이진수로 변환하여 각 비트의 연산을 자료구조로 사용하는 기법이다. 어떤 정수가 부호가 없는 N비트를 표현할 수 있는 범위를 가진다면, 이 정수는 N개의
On / Off를 갖는 자료구조로 생각할 수 있다.

## 비트마스크의 장점.
1. 빠른 수행 시간.
> O(1)의 시간복잡도로 연산이 완료
2. 간결한 코드.
> 우리가 비트연산을 알고있다고 가정하면 반복문이나, 조건문 없이 간결하게 원하는 값을 취할 수 있음.
3. 더 작은 메모리.
> 32개의 참 거짓으로 이루어진 값을 담을때 unsigned int(32비트) 1개의 변수로 모든 값을 저장 가능.
4. 연관 배열을 배열로 대체할 수 있음.
```c++
map<int, bool[]> myMap;
bool zero[] = {false, false, false};
bool one[] = {true, true, false};
bool tow[] = {false, true, true};
myMap[0] = zero;
myMap[1] = one;
myMap[2] = two;
```
> 위와 같은 연관배열이 존재할 때 이를 int[3]으로 나타낼 수 있음.
5. 집합을 효율적으로 표현할 수 있음.
> N비트의 부호가 없는 정수는 0부터 N-1까지의 원소를 가질 수 있는 집합이 될 수 있다. 0 <= i <= N-1 인 i가 집합에 포함되는 지의 여부를 비트연산을 통해
O(1)만에 단번에 알아낼 수 있다. 단 범위가 제한되는 것이 한계.

<br>
## 비트연산 예제
### 출력함수
```c++
void printBit(unsigned char val) {
    bool arr[8];
    for (int i = 0; i < 8; i++) {
        arr[i] = val % 2;
        val /= 2;
    }
    for (int i = 0; i < 8; i++) {
        cout << arr[7-i];
    }
    cout << endl;
}
```
### 실습

* shift 연산 ( << )
```c++
int main() {
    unsigned char flag = 1;
    // 0000 0001

    cout << "# 비트 shift 연산" << endl;
    flag <<= 1;
    printBit(flag);
    cout << endl;
    // 0000 0010

    cout << "# 비트 shift 연산2" <<endl;
    flag <<= 2;
    printBit(flag);
    cout << endl;
    // 0000 1000
```

* or 연산 ( | )
```c++
    flag |= 2;
    printBit(flag);
    cout << endl;
    // 0000 1010

    flag |= 1 << 7;
    printBit(flag);
    cout << endl;
    // 1000 1010
```

* 비트를 쉽게 표현
```c++
    unsigned int flag2 = 1;
    flag2 |= (1 << 2) | (1 << 5);
    printBit(flag2);
    cout << endl;
    // 0010 0100
```

* 비트 합집합 ( | )
```c++
    printBit(flag | flag2);
    cout << endl;
    // 1010 1110
```

* 비트 교집합 ( & )
```c++
    printBit(flag & flag2);
    cout << endl;
    // 0000 0000
```

* 비트 반전, xor ( ^ 0xff )
```c++
    printBit(flag ^ (unsigned int)255);
    cout << endl;
    // 1000 1010 반전-> 0111 0101
```

* 특정 비트 반전 xor ( ^ )
```c++
    printBit(flag ^ (unsigned int)1<<2);
    cout << endl;
    // 1000 1110
```

* 특정 비트 Off ( & )
```c++
    printBit(flag & (unsigned int)~(1 << 3));
    cout << endl;
    // 1000 0010
```

* 특정 비트 On
```c++
    printBit(flag | (unsigned int)1 << 2);
    cout << endl;
    // 1000 1110
```

* 2로 나누기 연산
```c++
    int val = 13;
    cout << (val >> 1) << endl;
    // 6
    return 0;
}
```
